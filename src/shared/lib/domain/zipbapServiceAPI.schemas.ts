/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Zipbap Service API
 * 집밥 서비스 전용 Swagger 문서
 * OpenAPI spec version: 1.0.1
 */
export interface UserUpdateDto {
  nickname: string;
  isPrivate: boolean;
  profileImage?: string;
  statusMessage?: string;
}

export interface ApiResponseUserProfileDto {
  isSuccess: boolean;
  code?: string;
  message?: string;
  result?: UserProfileDto;
}

export interface UserProfileDto {
  id: number;
  nickname: string;
  isPrivate: boolean;
  statusMessage?: string;
  profileImage?: string;
}

export interface CookingOrderRequest {
  /** 순서 */
  turn?: number;
  /** 이미지 URL */
  image?: string;
  /** 설명 */
  description?: string;
}

export interface UpdateTempRecipeRequestDto {
  /** 대표 썸네일 URL */
  thumbnail: string;
  /** 레시피 제목 */
  title?: string;
  /** 레시피 소제목 */
  subtitle?: string;
  /** 레시피 소개 */
  introduction?: string;
  /** 내 레시피(해당 사용자 전용) */
  myCategoryId?: string;
  /** 요리종류 ID */
  cookingTypeId?: number;
  /** 상황 카테고리 ID */
  situationId?: number;
  /** 주재료 카테고리 ID */
  mainIngredientId?: number;
  /** 조리방법 카테고리 ID */
  methodId?: number;
  /** 인분(인원수) 카테고리 ID */
  headcountId?: number;
  /** 요리 시간 카테고리 ID */
  cookingTimeId?: number;
  /** 난이도 카테고리 ID */
  levelId?: number;
  /** 재료 정보 */
  ingredientInfo?: string;
  /** 요리 킥 */
  kick?: string;
  /** 비공개 여부 */
  isPrivate?: boolean;
  /** 조리 순서 목록 */
  cookingOrders?: CookingOrderRequest[];
  /** 영상 URL */
  video?: string;
}

export interface CookingOrderResponse {
  /** 순서 */
  turn: number;
  /** 이미지 URL */
  image?: string;
  /** 설명 */
  description?: string;
}

export interface TempRecipeDetailResponseDto {
  /** 레시피 ID */
  id: string;
  /** 대표 썸네일 URL */
  thumbnail?: string;
  /** 레시피 제목 */
  title?: string;
  /** 레시피 소제목 */
  subtitle?: string;
  /** 레시피 소개 */
  introduction?: string;
  /** 내 레시피(해당 사용자 전용) */
  myCategoryId?: string;
  /** 요리종류 ID */
  cookingTypeId?: number;
  /** 상황 카테고리 ID */
  situationId?: number;
  /** 주재료 카테고리 ID */
  mainIngredientId?: number;
  /** 조리방법 카테고리 ID */
  methodId?: number;
  /** 인분(인원수) 카테고리 ID */
  headcountId?: number;
  /** 요리 시간 카테고리 ID */
  cookingTimeId?: number;
  /** 난이도 카테고리 ID */
  levelId?: number;
  /** 재료 정보 */
  ingredientInfo?: string;
  /** 요리 킥 */
  kick?: string;
  /** 비공개 여부 */
  isPrivate?: boolean;
  /** 생성 시각 */
  createdAt?: string;
  /** 수정 시각 */
  updatedAt?: string;
  /** 조리 순서 목록 */
  cookingOrders: CookingOrderResponse[];
  /** 영상 URL */
  video?: string;
}

export interface FinalizeRecipeRequestDto {
  /** 대표 썸네일 URL */
  thumbnail: string;
  /** 레시피 제목 */
  title: string;
  /** 레시피 소제목 */
  subtitle: string;
  /** 레시피 소개 */
  introduction: string;
  /** 내 레시피(해당 사용자 전용) */
  myCategoryId?: string;
  /** 요리종류 ID */
  cookingTypeId: number;
  /** 상황 카테고리 ID */
  situationId: number;
  /** 주재료 카테고리 ID */
  mainIngredientId: number;
  /** 조리방법 카테고리 ID */
  methodId: number;
  /** 인분(인원수) 카테고리 ID */
  headcountId: number;
  /** 요리 시간 카테고리 ID */
  cookingTimeId: number;
  /** 난이도 카테고리 ID */
  levelId: number;
  /** 재료 정보 */
  ingredientInfo: string;
  /** 요리 킥 */
  kick?: string;
  /** 비공개 여부 */
  isPrivate: boolean;
  /** 조리 순서 목록 */
  cookingOrders: CookingOrderRequest[];
  /** 영상 URL */
  video?: string;
}

export interface RecipeDetailResponseDto {
  /** 레시피 ID */
  id: string;
  /** 레시피 제목 */
  title?: string;
  /** 대표 썸네일 URL */
  thumbnail?: string;
  /** 레시피 소제목 */
  subtitle?: string;
  /** 레시피 소개 */
  introduction?: string;
  /** 내 레시피(해당 사용자 전용) */
  myCategoryId?: string;
  /** 요리종류 ID */
  cookingTypeId?: number;
  /** 상황 카테고리 ID */
  situationId?: number;
  /** 주재료 카테고리 ID */
  mainIngredientId?: number;
  /** 조리방법 카테고리 ID */
  methodId?: number;
  /** 인분(인원수) 카테고리 ID */
  headcountId?: number;
  /** 요리 시간 카테고리 ID */
  cookingTimeId?: number;
  /** 난이도 카테고리 ID */
  levelId?: number;
  /** 재료 정보 */
  ingredientInfo?: string;
  /** 요리 킥 */
  kick?: string;
  /** 비공개 여부 */
  isPrivate: boolean;
  /** 생성 시각 */
  createdAt?: string;
  /** 수정 시각 */
  updatedAt?: string;
  /** 조리 순서 목록 */
  cookingOrders: CookingOrderResponse[];
  /** 영상 URL */
  video?: string;
}

/**
 * 내 카테고리 수정 요청 DTO
 */
export interface UpdateMyCategoryDto {
  /**
   * 내 카테고리 명칭
   * @minLength 0
   * @maxLength 20
   */
  name?: string;
}

export interface ApiResponseMyCategoryResponseDto {
  isSuccess: boolean;
  code?: string;
  message?: string;
  result?: MyCategoryResponseDto;
}

/**
 * 내 카테고리 응답 DTO
 */
export interface MyCategoryResponseDto {
  /** ID */
  id: string;
  /** 내 카테고리 명칭 */
  name: string;
}

export interface UpdateCommentRequestDto {
  /** 댓글 내용 */
  content: string;
}

export interface ApiResponseUnit {
  isSuccess: boolean;
  code?: string;
  message?: string;
}

export interface LikeResponseDto {
  /** 레시피 ID */
  recipeId: string;
  /** 좋아요 수 */
  likeCount: number;
}

/**
 * 내 카테고리 생성 요청 DTO
 */
export interface CreateMyCategoryDto {
  /**
   * 내 카테고리 명칭
   * @minLength 0
   * @maxLength 20
   */
  name: string;
}

export interface ApiResponseFollowCountDto {
  isSuccess: boolean;
  code?: string;
  message?: string;
  result?: FollowCountDto;
}

export interface FollowCountDto {
  userId: number;
  followingCount: number;
  followerCount: number;
  isFollow: boolean;
}

export interface PresignedUrlRequest {
  /** 파일명 */
  fileName: string;
}

export interface PresignedUrlResponse {
  /** 업로드용 Presigned URL */
  uploadUrl: string;
  /** 업로드된 파일 접근 URL */
  fileUrl: string;
}

export interface CreateCommentRequestDto {
  /** 레시피 ID */
  recipeId: string;
  /** 댓글 내용 */
  content: string;
  /** 부모 댓글 ID (대댓글인 경우) */
  parentId?: number;
}

export interface CommentDetailResponseDto {
  /** 댓글 ID */
  id: number;
  /** 작성자 닉네임 */
  nickname: string;
  /** 작성자 프로필 이미지 */
  profileImage?: string;
  /** 댓글 내용 */
  content: string;
  /** 작성 시각 */
  createdAt: string;
  /** 수정 시각 */
  updatedAt: string;
  /** 대댓글 리스트 */
  children: CommentDetailResponseDto[];
}

export interface ApiResponseBookmarkSimpleResponseDto {
  isSuccess: boolean;
  code?: string;
  message?: string;
  result?: BookmarkSimpleResponseDto;
}

export interface BookmarkSimpleResponseDto {
  /** 레시피 ID */
  recipeId: string;
  /** 북마크 수 */
  bookmarkCount: number;
}

export interface MyRecipeListItemResponseDto {
  /** 레시피 ID */
  id: string;
  /** 대표 썸네일 URL */
  thumbnail?: string;
  /** 레시피 제목 */
  title?: string;
  /** 레시피 소제목 */
  subtitle?: string;
  /** 레시피 소개 */
  introduction?: string;
  /** 내 레시피 카테고리 ID */
  myCategoryId?: string;
  /** 생성 시각 */
  createdAt?: string;
  /** 수정 시각 */
  updatedAt?: string;
}

export interface ApiResponseListMyCategoryResponseDto {
  isSuccess: boolean;
  code?: string;
  message?: string;
  result?: MyCategoryResponseDto[];
}

export interface ApiResponseListFollowUserDto {
  isSuccess: boolean;
  code?: string;
  message?: string;
  result?: FollowUserDto[];
}

export interface FollowUserDto {
  userId: number;
  nickname: string;
  profileImage?: string;
  statusMessage?: string;
  isFollow: boolean;
}

export interface ApiResponse {
  isSuccess: boolean;
  code?: string;
  message?: string;
  result?: unknown;
}

export interface FeedItemResponseDto {
  nickname: string;
  profileImage?: string;
  userIsPrivate: boolean;
  recipeId: string;
  title?: string;
  thumbnail?: string;
  introduction?: string;
  cookingTime?: string;
  level?: string;
  createdAt: string;
  updatedAt: string;
  isLiked: boolean;
  isBookmarked: boolean;
  likeCount: number;
  bookmarkCount: number;
  commentCount: number;
}

export interface FeedDetailResponseDto {
  nickname: string;
  profileImage?: string;
  statusMessage?: string;
  isFollowing: boolean;
  recipeId: string;
  title?: string;
  subtitle?: string;
  introduction?: string;
  thumbnail?: string;
  video?: string;
  ingredientInfo?: string;
  kick?: string;
  recipeIsPrivate: boolean;
  recipeStatus: string;
  cookingType?: string;
  situation?: string;
  mainIngredient?: string;
  method?: string;
  headcount?: string;
  cookingTime?: string;
  level?: string;
  createdAt: string;
  updatedAt: string;
  likeCount: number;
  isLiked: boolean;
  bookmarkCount: number;
  isBookmarked: boolean;
  commentCount: number;
}

/**
 * 카테고리 항목 DTO
 */
export interface CategoryItemDto {
  /** 카테고리 ID */
  id?: number;
  /** 카테고리 이름/값 */
  name: string;
}

export interface CategoryListResponseDto {
  /** 요리 시간 목록 */
  cookingTimes: CategoryItemDto[];
  /** 요리 종류 목록 */
  cookingTypes: CategoryItemDto[];
  /** 인원 수 목록 */
  headcounts: CategoryItemDto[];
  /** 난이도 목록 */
  levels: CategoryItemDto[];
  /** 주재료 목록 */
  mainIngredients: CategoryItemDto[];
  /** 조리 방법 목록 */
  methods: CategoryItemDto[];
  /** 상황별 요리 목록 */
  situations: CategoryItemDto[];
  /** 내 카테고리 목록 */
  myCategories: MyCategoryItemDto[];
}

/**
 * 내 카테고리 항목 DTO
 */
export interface MyCategoryItemDto {
  /** 내 카테고리 ID */
  id: string;
  /** 내 카테고리 이름 */
  name: string;
}

export interface ApiResponseListBookmarkRecipeResponseDto {
  isSuccess: boolean;
  code?: string;
  message?: string;
  result?: BookmarkRecipeResponseDto[];
}

export interface BookmarkRecipeResponseDto {
  /** 레시피 ID */
  recipeId: string;
  /** 썸네일 이미지 */
  thumbnailImage?: string;
}

export interface ApiResponseObject {
  isSuccess: boolean;
  code?: string;
  message?: string;
  result?: unknown;
}

export type UpdateProfileParams = {
  dto: UserUpdateDto;
};

export type GetCommentsParams = {
  recipeId: string;
};

export type GetMyActiveRecipesFilteredParams = {
  myCategoryId?: string[];
};

export type GetFollowingListParams = {
  condition?: string;
};

export type GetFollowerListParams = {
  condition?: string;
};

export type GetFeedParams = {
  /**
   * 필터 조건 (ALL/TODAY/HOT/RECOMMEND/FOLLOWING)
   */
  filter?: GetFeedFilter;
  /**
   * Zero-based page index (0..N)
   */
  page?: unknown;
  /**
   * The size of the page to be returned
   */
  size?: unknown;
  /**
   * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
   */
  sort?: unknown[];
};

export type GetFeedFilter = (typeof GetFeedFilter)[keyof typeof GetFeedFilter];

// eslint-disable-next-line @typescript-eslint/no-redeclare, no-redeclare
export const GetFeedFilter = {
  ALL: 'ALL',
  TODAY: 'TODAY',
  HOT: 'HOT',
  RECOMMEND: 'RECOMMEND',
  FOLLOWING: 'FOLLOWING',
} as const;
